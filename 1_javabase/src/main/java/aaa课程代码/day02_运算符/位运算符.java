package aaa课程代码.day02_运算符;

/**
 六、位运算符（了解）
 效率高，但是可读性差的运算符

 左移：<<
 左移几位，相当于乘以2的几次方
 右移：>>
 右移几位，相当于除以2的几次方
 右边被移出，左边补什么，看最高位，原来是0补0，原来是1，补1
 无符号右移：>>>
 右边被移出，左边补0

 按位与：&
 按位或：|
 按位异或：^
 按位取反：~  （单目运算符）



 逻辑与，左右两边的操作数是boolean值
 按位与，左右两边的操作数是整数
 */
public class 位运算符 {
    public static void main(String[] args){
        //用补码
        //0000 0000 0000 0000 0000 0000 0000 0010
        //<<3  右边补3个0
        //0 0000 0000 0000 0000 0000 0000 0010000
        System.out.println(2<<3);

        //0000 0000 0000 0000 0000 0000 0000 1010
        //<<3  右边补3个0
        //0 0000 0000 0000 0000 0000 0000 1010000
        System.out.println(10<<3);

        //0000 0000 0000 0000 0000 0000 0000 1010
        //>>3
        //0000000 0000 0000 0000 0000 0000 0000 1
        System.out.println(10>>3);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //补码：1111 1111 1111 1111 1111 1111 1111 1000
        //>>3
        //1111111 1111 1111 1111 1111 1111 1111 1  补码
        //1111111 1111 1111 1111 1111 1111 1111 0  反码
        //1000 0000 0000 0000 0000 0000 0000 0001  原码  -1
        System.out.println(-8>>3);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //补码：1111 1111 1111 1111 1111 1111 1111 1000
        //>>>3	右边被移出，左边不管是什么，都补0
        //0001111 1111 1111 1111 1111 1111 1111 1
        System.out.println(-8>>>3);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //-8补码： 1111 1111 1111 1111 1111 1111 1111 1000

        //10的补码：0000 0000 0000 0000 0000 0000 0000 1010
        //-8&10  :0000 0000 0000 0000 0000 0000 0000 1000 ->  8
        System.out.println(-8 & 10);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //-8补码： 1111 1111 1111 1111 1111 1111 1111 1000

        //10的补码：0000 0000 0000 0000 0000 0000 0000 1010
        //-8|10：  1111 1111 1111 1111 1111 1111 1111 1010  补码
        //反码：   1111 1111 1111 1111 1111 1111 1111 1001
        //原码：   1000 0000 0000 0000 0000 0000 0000 0110  ->6
        System.out.println(-8 | 10);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //-8补码： 1111 1111 1111 1111 1111 1111 1111 1000

        //10的补码：0000 0000 0000 0000 0000 0000 0000 1010
        //-8^10：1111 1111 1111 1111 1111 1111 1111 0010  补码
        //反码： 1111 1111 1111 1111 1111 1111 1111 0001
        //原码： 1000 0000 0000 0000 0000 0000 0000 1110  -》-14
        System.out.println(-8 ^ 10);

        //-8
        //原码：1000 0000 0000 0000 0000 0000 0000 1000
        //反码：1111 1111 1111 1111 1111 1111 1111 0111
        //-8补码： 1111 1111 1111 1111 1111 1111 1111 1000
        //~-8：    0000 0000 0000 0000 0000 0000 0000 0111 -》7
        System.out.println(~-8);
    }
}
